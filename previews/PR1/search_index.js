var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VectorizedKmers","category":"page"},{"location":"#VectorizedKmers","page":"Home","title":"VectorizedKmers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VectorizedKmers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [VectorizedKmers]","category":"page"},{"location":"#VectorizedKmers.AbstractKmerCount","page":"Home","title":"VectorizedKmers.AbstractKmerCount","text":"AbstractKmerCount{A, K, T <: Real, V <: AbstractVector{T}}\n\nAbstract type for K-mer counts. A is the alphabet size, K is the K-mer size, and T is the element type of the underlying counts field, which in turn has type V{T}.\n\n\n\n\n\n","category":"type"},{"location":"#VectorizedKmers.AbstractKmerCountVector","page":"Home","title":"VectorizedKmers.AbstractKmerCountVector","text":"AbstractKmerCountVector{A, K, T <: Real, M <: AbstractMatrix{T}} <: AbstractVector{KmerCount{A, K, T}}\n\nA container for K-mer counts, where K-mer counts are stored together as rows or columns in a matrix. A is the alphabet size, K is the K-mer size, T is the element type of the counts, and M is the type of the matrix in which the K-mer counts are stored.\n\n\n\n\n\n","category":"type"},{"location":"#VectorizedKmers.KmerCount","page":"Home","title":"VectorizedKmers.KmerCount","text":"KmerCount{A, K, T, V} <: AbstractKmerCount{A, K, T, V}\n\nA concrete type for K-mer counts with vector type Base.Vector{T}.\n\n\n\n\n\n","category":"type"},{"location":"#VectorizedKmers.count_kmers!-Union{Tuple{T}, Tuple{K}, Tuple{A}, Tuple{KmerCount{A, K, T}, Vector{<:Integer}}} where {A, K, T}","page":"Home","title":"VectorizedKmers.count_kmers!","text":"count_kmers!(kmer_count, kmers; reset=true)\n\nMutate the counts vector in kmer_count by adding the counts of each kmer in kmers. The K-mers in kmers must be represented as integers between 0 and length(kmer_count) - 1.\n\nIf reset is true, the counts vector will be zero-ed before counting.\n\nThis is not a very efficient method, since it takes an entire vector. It is mainly used for testing. Ideally the K-mers would be procedurally calculated in constant memory.\n\n\n\n\n\n","category":"method"}]
}
